"============================================================
"                     ~vimrc~
"============================================================
"
" Author:       Robert Jones [http://github.com/robert-g-j]
" Source:       https://github.com/robert-g-j/dotfiles
"
"============================================================
"                     ~Top Settings~

filetype plugin indent on    "required
runtime macros/matchit.vim   "uses macro to jump between html/xml tags
au BufNewFile,BufRead *.ejs set filetype=html "use html syntax highlighting for EJS
"============================================================
"                     ~Mappings~

nnoremap p p`[v`]=

" Easy access to the start of the line
nnoremap 0 ^
" Set Leader to be the space-bar
let mapleader = "\<Space>"

" New tab and edit vimrc
nnoremap <leader>vi :tabedit $MYVIMRC<cr>
" Source (reload) the vimrc
nnoremap <leader>so :source $MYVIMRC<cr>

"Open NERDTree
nnoremap <leader>nt :NERDTree<cr>
nnoremap <leader>nf :NERDTreeFind<cr>

" fzf mappings
nnoremap <silent> <leader>d :Files<cr> 
nnoremap <silent> <Leader>f :Rg<cr>

"ALE fix file
" nmap <leader>sa :ALEFix<cr>

" Paste last yank
nnoremap <leader>p "0P

"Run tests
nnoremap <leader>t :!yarn test<cr>

"Move up and down by visible lines if current line is wrapping
nnoremap j gj
nnoremap k gk

"Remap escape keys
inoremap jj <Esc>

" Save file on escaping insert mode
:autocmd InsertLeave * silent! update

"============================================================
"                   ~Plugin Config~
"let g:jsx_ext_required = 0 " Allow JSX in normal JS files
let g:used_javascript_libs = 'angularjs, angularui'

" ALE
" let g:ale_javascript_prettier_use_local_config = 1
" let g:ale_fixers = {
"       \  'javascript': ['prettier', 'prettier-standard', 'standard', 'eslint'],
"       \  'typescript': ['tslint', 'prettier'],
"       \  'rust': ['rustfmt'],
"       \  'go': ['gofmt', 'goimports'],
"       \  'css': ['prettier'],
"       \  'jade': ['prettier'],
"       \  'html': ['html-beautify'],
"       \  'json': ['prettier'],
"       \}
" let g:ale_fix_on_save = 0 " runs prettier on save


"=================================================================

" COC configuration
" export NVIM_COC_LOG_LEVEL=debug 
" Enable prettier to format current buffer using CoC
nnoremap <leader>fd :CocCommand prettier.formatFile<cr>

" Enable COC when in node projects
let g:coc_global_extensions = [
      \ 'coc-tsserver'
    \]

if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif

"=================================================================

" Airline
" let g:airline#extensions#ale#enabled = 1 " Integrate vim-airline and ale
" let g:airline_section_b = '' " Hide the branch info in airline

" NERDTree
let NERDTreeShowHidden = 1 "shows hidden files as default

" CtrlP
let g:ctrlp_custom_ignore = {
\ 'dir':  '\v[\/](node_modules)|\.(git|hg|svn|next|node_modules)$',
\ 'file': '\v\.(exe|so|dll|DS_Store)$',
\ } "ctrlp ignores
let g:ctrlp_dont_split = 'NERD'
let g:ctrlp_show_hidden = 1 "shows hidden files
let g:ctrlp_working_path_mode = 'rwa' "modify to run from cwd

"Emmet
if isdirectory('./node_modules')
  let g:user_emmet_leader_key=','
endif

let g:user_emmet_settings = { 'javascript.jsx' : { 'extends' : 'jsx', } }

"============================================================
filetype off                  " required

" vim-plug checks for an autoload file and if not downloads it and installs
" plugins
if empty(glob('~/.vim/autoload/plug.vim'))
silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Editor improvements
Plug 'tpope/vim-fireplace'       "Repl support
Plug 'myusuf3/numbers.vim'       "Relative line numbers
Plug 'scrooloose/nerdtree'       "File tree navigation. Remapped above.
Plug 'scrooloose/nerdcommenter'  "Comment functions
Plug 'bling/vim-airline'         "The fancy strip at the bottom
Plug 'tpope/vim-fugitive'        "Git wrapper
Plug 'tpope/vim-sensible'        "Universal, agreeable defaults
Plug 'ctrlpvim/ctrlp.vim'        "Fuzzy Search
Plug 'tpope/vim-surround'        "parentheses support
Plug 'tpope/vim-repeat'          "repeats plugin actions with .
Plug 'jiangmiao/auto-pairs'      "adds closing brackets
Plug '/usr/local/opt/fzf'        "fzf fuzzy search
Plug 'junegunn/fzf.vim'

" General
" Plug 'chaoren/vim-wordmotion'                    " sensible word based movement/ disabled because breaking change
Plug 'tomtom/tcomment_vim'                       " sensible commenting
Plug 'tommcdo/vim-exchange'                      " word exchange that isn't awful
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'sirver/ultisnips'                          "snippet support
Plug 'machakann/vim-highlightedyank'             "Make the yanked region apparent!
Plug 'janko-m/vim-test'                          " unified wrapper for running tests
Plug 'einfachtoll/didyoumean'                    " asks for the right file
Plug 'jparise/vim-graphql'                      "support for graphql

" LSP support 
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Misc languages
" Clojure
" Plug 'guns/vim-clojure-static', { 'for': 'clojure' } "Clojure runtime files
" Rust
"Plug 'rust-lang/rust.vim', { 'for': 'rust' }
" Go
" Plug 'fatih/vim-go', { 'for': 'golang', 'do': ':GoUpdateBinaries'  }

" Javascript
Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'jsx'] }  "syntax highlighting and improved indentation
Plug 'jelera/vim-javascript-syntax'                               "syntax highlight
Plug 'moll/vim-node'

Plug 'maxmellon/vim-jsx-pretty' "syntax highlighting after deprecation of vim-jsx
Plug 'othree/javascript-libraries-syntax.vim' "syntax for JS libaries
" Plug 'posva/vim-vue'            "syntax highlighting for vue

" Typescript
Plug 'leafgarland/typescript-vim' "syntax highlighting
Plug 'peitalin/vim-jsx-typescript' "syntax highlighting again

" Clojure
" Plug 'kien/rainbow_parentheses.vim' "Colours up parentheses in Clojure repl

" Java build tools
Plug 'bazelbuild/vim-ft-bzl'  "rudimentary Bazel filetype plugin
Plug 'google/vim-maktaba'     "required for vim-bazel
Plug 'bazelbuild/vim-bazel'   "java/scala build support
Plug 'derekwyatt/vim-scala'   "scala language support

" Tmux Integration
Plug 'christoomey/vim-tmux-navigator' "allow sensible pane switching from vim panes to tmux panes

" Template Highlighting and Support
Plug 'mustache/vim-mustache-handlebars', {'for': ['handlebars', 'hbs']}  "template support 
Plug 'digitaltoad/vim-pug'
Plug 'lumiliet/vim-twig'                                                 "twig template support
Plug 'mattn/emmet-vim'                                                   "emmet support

" Terraform
Plug 'hashivim/vim-terraform'

" Styled Components
Plug 'styled-components/vim-styled-components', { 'branch': 'main' } "syntax highlighting

" Themes
Plug 'w0ng/vim-hybrid'
Plug 'reedes/vim-colors-pencil'
Plug 'altercation/vim-colors-solarized' "easy on the eye

" Git plugin not hosted on GitHub
"Plug 'wincent/command-t', {
" \   'do': 'cd ruby/command-t/ext/command-t && ruby extconf.rb && make'
" \ }
"Plug 'git://git.wincent.com/command-t.git'
call plug#end()

"==========================================================================
" COC configuration 
"==========================================================================
set cmdheight=2     " give more space to display messages
set hidden          " TextEdit might fail if this is not set 
set shortmess+=c    " Don't pass messages to |ins completion menu|

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
" Recently vim can merge signcolumn and number column into one
set signcolumn=number
else
set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
" inoremap <silent><expr> <TAB>
"     \ pumvisible() ? "\<C-n>" :
"     \ <SID>check_back_space() ? "\<TAB>" :
"     \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
let col = col('.') - 1
return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nnoremap <silent> [g <Plug>(coc-diagnostic-prev)
nnoremap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nnoremap <leader> gd <Plug>(coc-definition)
nnoremap <leader> gy <Plug>(coc-type-definition)
nnoremap <leader> gi <Plug>(coc-implementation)
nnoremap <leader> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
" Comment highlighting
autocmd FileType json syntax match Comment +\/\/.\+$+

" Symbol renaming.
nnoremap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
" xnoremap <leader>f  <Plug>(coc-format-selected)
" vnoremap <leader>f  <Plug>(coc-format-selected)
" nnoremap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
autocmd!
" Setup formatexpr specified filetype(s).
autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
" Update signature help on jump placeholder.
autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xnoremap <leader>a  <Plug>(coc-codeaction-selected)
nnoremap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nnoremap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nnoremap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xnoremap if <Plug>(coc-funcobj-i)
onoremap if <Plug>(coc-funcobj-i)
xnoremap af <Plug>(coc-funcobj-a)
onoremap af <Plug>(coc-funcobj-a)
xnoremap ic <Plug>(coc-classobj-i)
onoremap ic <Plug>(coc-classobj-i)
xnoremap ac <Plug>(coc-classobj-a)
onoremap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nnoremap <leader> <C-s> <Plug>(coc-range-select)
xnoremap <leader> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
" nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" from thoughtworks doc for auto type info on hover
" ------------------------------------------------ "
" function! ShowDocIfNoDiagnostic(timer_id)
"     if (coc#util#has_float() == 0)
"           silent call CocActionAsync('doHover')
"     endif
" endfunction

" show type information on hover
" function! s:show_hover_doc()
"     call timer_start(500, 'ShowDocIfNoDiagnostic')
" endfunction


" autocmd CursorHoldI * :call <SID>show_hover_doc()
" autocmd CursorHold * :call <SID>show_hover_doc()
" ------------------------------------------------ "

" Non-plug in settings
syntax enable
set background=light
colorscheme hybrid

"Use system clipboard.
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

set mouse=n               " mouse scroll in normal mode 
set nocompatible          " be iMproved, required
set number                " show line numbers
set laststatus=2          " last window always has a statusline
set nobackup              " Stops creating swp files (thank goodness)
set nowritebackup
set noswapfile
set nohlsearch            " Don't continue to highlight searched phrases.
set incsearch             " But do highlight as you type your search.
set ignorecase            " Make searches case-insensitive.
set pastetoggle=<F9>      " Using allows paste without auto indent
set rtp+=/usr/local/opt/fzf " Gets fzf running
set ruler                 " Always show info along bottom.
set autoindent            " auto-indent
set tabstop=2             " tab spacing
set scrolloff=4           " keep at least 4 lines below the cursor
set softtabstop=2         " unify
set shiftwidth=2          " indent/outdent by 2 columns
set shiftround            " always indent/outdent to the nearest tabstop
set splitright            " split new files to the right
set splitbelow            " split new files below
set expandtab             " use spaces instead of tabs
set secure                " limit what modelines and autocmds can do
set smarttab              " use tabs at the start of a line, spaces elsewhere
set wrap                  " soft wrap
