"============================================================
"                     ~vimrc~
"============================================================
"
" Author:       Robert Jones [http://github.com/robert-g-j]
" Source:       https://github.com/robert-g-j/dotfiles
"
"============================================================
"                     ~Top Settings~

filetype plugin indent on    "required
runtime macros/matchit.vim   "uses macro to jump between html/xml tags
au BufNewFile,BufRead *.ejs set filetype=html "use html syntax highlighting for EJS
"============================================================
"                     ~Mappings~

nnoremap p p`[v`]=

" Easy access to the start of the line
nmap 0 ^
" Set Leader to be the space-bar
let mapleader = "\<Space>"

" New tab and edit vimrc
nmap <leader>vi :tabedit $MYVIMRC<cr>
" Source (reload) the vimrc
nmap <leader>so :source $MYVIMRC<cr>

"Open NERDTree
nmap <leader>nt :NERDTree<cr>
nmap <leader>nf :NERDTreeFind<cr>

"ALE fix file
" nmap <leader>sa :ALEFix<cr>

" Paste last yank
nmap <leader>p "0P

"Run tests
nmap <leader>t :!yarn test<cr>

"Move up and down by visible lines if current line is wrapping
nmap j gj
nmap k gk

"Remap escape keys
imap jj <Esc>

" Save file on escaping insert mode
imap <esc> <esc>:w<cr>

"============================================================
"                   ~Plugin Config~
"let g:jsx_ext_required = 0 " Allow JSX in normal JS files
let g:used_javascript_libs = 'angularjs, angularui'

" ALE
" let g:ale_javascript_prettier_use_local_config = 1
" let g:ale_fixers = {
"       \  'javascript': ['prettier', 'prettier-standard', 'standard', 'eslint'],
"       \  'typescript': ['tslint', 'prettier'],
"       \  'rust': ['rustfmt'],
"       \  'go': ['gofmt', 'goimports'],
"       \  'css': ['prettier'],
"       \  'jade': ['prettier'],
"       \  'html': ['html-beautify'],
"       \  'json': ['prettier'],
"       \}
" let g:ale_fix_on_save = 0 " runs prettier on save


"=================================================================

" COC configuration
" export NVIM_COC_LOG_LEVEL=debug 
" Enable prettier to format current buffer using CoC
nmap <leader>fd :CocCommand prettier.formatFile<cr>

" Enable COC when in node projects
let g:coc_global_extensions = [
      \ 'coc-tsserver'
    \]

if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif

"=================================================================

" Airline
" let g:airline#extensions#ale#enabled = 1 " Integrate vim-airline and ale
let g:airline_section_b = '' " Hide the branch info in airline

" NERDTree
let NERDTreeShowHidden = 1 "shows hidden files as default

" CtrlP
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](node_modules)|\.(git|hg|svn|next|node_modules)$',
  \ 'file': '\v\.(exe|so|dll|DS_Store)$',
  \ } "ctrlp ignores
let g:ctrlp_dont_split = 'NERD'
let g:ctrlp_show_hidden = 1 "shows hidden files

"Emmet
let g:user_emmet_leader_key='<Tab>'
let g:user_emmet_settings = { 'javascript.jsx' : { 'extends' : 'jsx', } }

"============================================================
filetype off                  " required

" vim-plug checks for an autoload file and if not downloads it and installs
" plugins
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" Editor improvements
Plug 'tpope/vim-fireplace' "Repl support
Plug 'myusuf3/numbers.vim'      "Relative line numbers
Plug 'scrooloose/nerdtree'      "File tree navigation. Remapped above.
Plug 'scrooloose/nerdcommenter'  "Comment functions
Plug 'bling/vim-airline'        "The fancy strip at the bottom
Plug 'tpope/vim-fugitive'       "Git wrapper
Plug 'tpope/vim-sensible'       "Universal, agreeable defaults
Plug 'ctrlpvim/ctrlp.vim'       "Fuzzy Search
Plug 'tpope/vim-surround'       "parentheses support
Plug 'tpope/vim-repeat'         "repeats plugin actions with .
Plug 'jiangmiao/auto-pairs'     "adds closing brackets
Plug '/usr/local/opt/fzf'       "fzf fuzzy search
Plug 'junegunn/fzf.vim'

" Clojure
Plug 'guns/vim-clojure-static' "Clojure runtime files

" Rust
Plug 'rust-lang/rust.vim'

" Go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries'  }

" Javascript
"Plug 'w0rp/ale'                 "async linting
Plug 'pangloss/vim-javascript' "syntax highlighting and improved indentation
Plug 'jelera/vim-javascript-syntax' "syntax highlight
" Plug 'mxw/vim-jsx'              "Syntax highlighting and indenting for JSX
" (deprecated)
Plug 'maxmellon/vim-jsx-pretty' "syntax highlighting after deprecation of vim-jsx
Plug 'othree/javascript-libraries-syntax.vim' "syntax for JS libaries
Plug 'posva/vim-vue'            "syntax highlighting for vue

" Code Completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Typescript
Plug 'palantir/tslint' "tslint support although deprecated
Plug 'leafgarland/typescript-vim' "syntax highlighting
Plug 'peitalin/vim-jsx-typescript' "syntax highlighting again

" Clojure
Plug 'kien/rainbow_parentheses.vim' "Colours up parentheses in Clojure repl

" Java build tools
Plug 'bazelbuild/vim-ft-bzl' "rudimentary Bazel filetype plugin

" Tmux Integration
Plug 'christoomey/vim-tmux-navigator' "allow sensible pane switching from vim panes to tmux panes

" Template Highlighting and Support
Plug 'digitaltoad/vim-pug'
Plug 'lumiliet/vim-twig' "twig template support
Plug 'mattn/emmet-vim'          "emmet support

" Styled Components
Plug 'styled-components/vim-styled-components' "syntax highlighting

" Themes
Plug 'w0ng/vim-hybrid'
Plug 'reedes/vim-colors-pencil'
Plug 'altercation/vim-colors-solarized' "easy on the eye

" Git plugin not hosted on GitHub
"Plug 'wincent/command-t', {
" \   'do': 'cd ruby/command-t/ext/command-t && ruby extconf.rb && make'
" \ }
"Plug 'git://git.wincent.com/command-t.git'
call plug#end()

" coc configuration 
function! ShowDocIfNoDiagnostic(timer_id)
    if (coc#util#has_float() == 0)
          silent call CocActionAsync('doHover')
    endif
endfunction

function! s:show_hover_doc()
    call timer_start(250, 'ShowDocIfNoDiagnostic')
endfunction

autocmd CursorHoldI * :call <SID>show_hover_doc()
autocmd CursorHold * :call <SID>show_hover_doc()

" Non-plug in settings
syntax enable
set background=dark
colorscheme hybrid

"Use system clipboard.
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif
set mouse=n               " mouse scroll in normal mode 
set nocompatible          " be iMproved, required
set number                " show line numbers
set laststatus=2          " last window always has a statusline
set nobackup              " Stops creating swp files (thank goodness)
set nowritebackup
set noswapfile
set nohlsearch            " Don't continue to highlight searched phrases.
set incsearch             " But do highlight as you type your search.
set ignorecase            " Make searches case-insensitive.
set pastetoggle=<F9>      " Using allows paste without auto indent
set rtp+=/usr/local/opt/fzf " Gets fzf running
set ruler                 " Always show info along bottom.
set autoindent            " auto-indent
set tabstop=2             " tab spacing
set scrolloff=4           " keep at least 4 lines below the cursor
set softtabstop=2         " unify
set shiftwidth=2          " indent/outdent by 2 columns
set shiftround            " always indent/outdent to the nearest tabstop
set splitright            " split new files to the right
set splitbelow            " split new files below
set expandtab             " use spaces instead of tabs
set secure                " limit what modelines and autocmds can do
set smarttab              " use tabs at the start of a line, spaces elsewhere
set wrap                  " soft wrap
